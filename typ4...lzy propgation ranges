/*
   صل عل محمد
   if (u == Abdel-Aziz Mostafa )   love u <3 ;
  دايما احلم ربنا المنان

*/
#include<bits/stdc++.h>
using namespace std;

#define N 300007
//#define mod 1000
#define int long long
#define F first
#define S second


struct item  {
     int v  ;
     int op  ;      // 0 assign        |  1 add
};

struct segtree{



    vector <int> op;
    vector <item>  operations;
    vector <int > val ;

    int sz =1;
    segtree(int n){         //empty
        while(sz<n)sz*=2;
        operations.resize(2*sz);
        op.resize(2*sz);
        val.resize(2*sz) ;

    }
    int Neutral_elemnt  = 0 ;

    int merge(int m1  ,  int m2 , int len){
          return  m1 + m2 ;
    }

    item operation (item a ,  item b , int x){
        if (!op[x])
            return  b ;

        int v1  = a.v , v2 = b.v , op1 = a.op , op2 =b.op;
        item res ;
        if (op2){
                if (op1){
                    res.op =1;
                    res.v = v1  +v2;
                }
                else {
                    res.op =  0 ;
                    res.v =  v1+v2;
                }
        }
        else{
                res.op = 0 ;
                res.v =   v2 ;
        }
        return res;
    }

    void apply(item& a ,item b , int x){
          a=operation (a, b ,x);
    }
    void update(int & cur  , item oper , int len){
          if (oper.op)
               cur+=len*oper.v;
          else
               cur =len*oper.v;
    }
    void reset (int x , int  lx ,int rx){
         if (rx- lx==1){
             val[x] = 0 ;
             if (op[x])
              update(val[x] , operations[x]  , 1) ;
         }
         else {
            val[x] = merge(val[2*x+1] , val[2*x+2] , (rx-lx)/2 ) ;
            if (op[x])
              update(val[x] , operations[x] , rx-lx ) ;
         }
    }
    void propagate(int x  , int lx  ,int rx){
          if (rx-lx==1 || !op[x])
            return  ;

          apply(operations[2*x+1], operations[x] , 2*x+1) ;
          apply(operations[2*x+2] ,operations[x] ,2*x+2) ;
          op[2*x+1] =op[2*x+2] =1;
          //clear op of node
          op[x]=0;
          //////////////////////
          int md  =  (lx+rx)/2;
          reset(2*x+1 , lx, md); //عشان هي جالها تغيرات والمفروض انها مرتبطه بتفيراتها وال تحتيها
          reset(2*x+2, md, rx); //same
          reset(x , lx, rx);    //same
          ////////////////////////////////////////////////////



    }


    void change  (int  l , int r,item oper , int x, int lx ,  int rx){
        propagate(x , lx, rx);
        if (rx<=l || lx>=r)
            return  ;
        if (lx >=l and rx<=r){
                 apply( operations[x] , oper ,x);
                 op[x]  = 1;
                 reset(x  , lx , rx) ;
                return ;
        }
        int md  = (lx+rx)/2;
        change( l, r, oper, 2*x+1 ,lx, md);
        change (l, r, oper ,  2*x+2 , md, rx);

        val[x] = merge(val[2*x+1] , val[2*x+2] , (rx-lx)/2) ;
    }
    void change (int  l ,int r ,item oper){
        change(l,r , oper,0 ,0,sz);
    }
    int calc( int  l,  int r , int x , int lx , int rx ){

          propagate(x,lx,rx);
          if (lx>=r  ||rx<=l)
            return  Neutral_elemnt ;
          if (lx>= l  and rx<=r){
            return val[x] ;
          }

          int md  =  (lx+rx)/2;
          int res1 = calc( l , r , 2*x+1 ,lx ,md);
          int res2 = calc( l , r, 2*x+2 , md, rx) ;
          return merge(res1 , res2 , rx-lx);

    }
    int calc(int l,  int r){
       return calc(l , r , 0, 0, sz) ;
    }


};
signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);


    int n, m ;
    cin>>n>>m;
    segtree sg(n+1);




    for (int  i = 0 ; i  <m; ++i)
    {
         int q;
         cin>>q;
         if (q==1)
         {
                int l  , r ,v ;
                cin>>l>>r>>v;
                sg.change( l ,r ,{v, 0});

         }
         else if (q==2)
         {
                int l  , r ,v ;
                cin>>l>>r>>v;
                sg.change( l ,r ,{v, 1});

         }
         else
         {
             int l , r;
             cin>>l>>r;
             cout<<sg.calc( l ,r) <<"\n";
         }

    }



}
