const int N = 3e6;
#define vi vector<int>
int s1[N] , s2[N] ;
vi& manacher(const string& s){
	int n=s.size();
	vi& ans=*new vi(n);
	int far_most=-1;
	int center=-1;
	for(int i=0;i<n;i++){
		if(far_most<i) ans[i]=0;
		else ans[i]=min(far_most-i,ans[2*center-i]);
		for(int j=i+ans[i]+1,k=i-ans[i]-1;j<n && k>=0;j++,k--){
			if(s[j]==s[k]){
				ans[i]++;
			}else break;
		}
		if(ans[i]+i>far_most){
			far_most=ans[i]+i;
			center=i;
		}
	}
	return ans;
}

vector<int> v;
void pre(string &s ){
        int  n  =s.size();
        string t="$";
		for(char c:s){
			t.push_back(c);
			t.push_back('$');
		}
		v=manacher(t);
		s1[0]=0;
		for(int i=1;i<n;i++){
			s1[i]=s1[i-1]+(s[i]!=s[i-1]);
		}
		s2[0]=0;
		s2[1]=0;
		for(int i=2;i<n;i++){
			s2[i]=s2[i-1]+(s[i]!=s[i-2]);
		}


}
bool palindrome(int  l  , int r){
       return v[l+r+1] >=r-l;

}
/*
         cnt_palindromes  from l ... r  according to pre >> v[i] stores how many times i will be center of plaindrome and this pattern is continous  z y x i x y  z so for each 
         i cnt how many times and sum vals and you can use pre sum 


*/